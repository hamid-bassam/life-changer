// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String @id
  kindeId   String @unique
  email     String @unique
  firstName String
  lastName  String
  notes     Note[] // Relation avec le modèle Note
  goals     Goal[] // Relation avec le modèle Goal
  tasks     Task[] // Relation avec le modèle Task
}

model Note {
  id          String  @id @default(uuid())
  title       String
  document    Json?   @db.Json // Peut être utilisé pour stocker le contenu des notes en format HTML/Markdown/Plain Text
  htmlContent String?
  // Relation avec User

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  Goal   Goal?   @relation(fields: [goalId], references: [id])
  goalId String?
  Task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model Goal {
  id           String    @id @default(uuid())
  title        String
  description  String?
  status       String    @default("pending")
  priority     Int
  importance   Int       @default(50)  
  depth        Int       @default(0)
  dueDate      DateTime?
  isChild      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  parentGoalId String?
  parentGoal   Goal?     @relation("GoalToSubGoals", fields: [parentGoalId], references: [id])
  subGoals     Goal[]    @relation("GoalToSubGoals")
  tasks        Task[]
  notes        Note[]
  tags         Tag[]     @relation("GoalTags")

  @@index([userId])
  @@index([parentGoalId])
}

model Task {
  id           String    @id @default(uuid())
  ref          String
  title        String
  priority     Int      @default(0)
  importance   Int      @default(50)
  description  String?
  status       String    @default("pending")
  dueDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  depth        Int       @default(0)
  notes        Note[]
  goalId       String?
  goal         Goal?     @relation(fields: [goalId], references: [id])
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  subTasks     Task[]    @relation("TaskToSubTasks")
  parentTask   Task?     @relation("TaskToSubTasks", fields: [parentTaskId], references: [id])
  parentTaskId String?
  tags         Tag[]     @relation("TaskTags")

  @@index([goalId])
  @@index([userId])
  @@index([parentTaskId])
}

model Tag {
  id        String        @id @default(uuid())
  name      String
  color     String?
  variant   BadgeVariant?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  goals     Goal[]        @relation("GoalTags")
  tasks     Task[]        @relation("TaskTags")

  @@unique([name, color, variant])
}

enum BadgeVariant {
  DEFAULT     @map("default")
  OUTLINE     @map("outline")
  DESTRUCTIVE @map("destructive")
  SECONDARY   @map("secondary")
}
